    // prisma/schema.prisma

    generator client {
      provider = "prisma-client-js"
    }

    datasource db {
      provider = "postgresql"
      url      = env("DATABASE_URL")
    }

    // ==========================
    // ENUMS
    // ==========================

    enum Role {
      CUSTOMER
      OWNER
      ADMIN
    }

    enum VehicleType {
      SUV
      MPV
      SEDAN
      HATCHBACK
      SPORT
      TRUCK
      MOTORCYCLE
      OTHER
    }

    enum TransmissionType {
      MANUAL
      AUTOMATIC
    }

    enum FuelType {
      GASOLINE
      DIESEL
      ELECTRIC
      HYBRID
    }

    enum PaymentMethod {
      BANK_TRANSFER_MANUAL
      BANK_TRANSFER_AUTOMATIC
      CREDIT_CARD
      E_WALLET
      CASH
    }

    enum OrderStatus {
      PENDING_REVIEW
      APPROVED
      REJECTED
      PAID
      ACTIVE
      COMPLETED
      CANCELED
    }

    enum PaymentStatus {
      PENDING
      COMPLETED
      FAILED
      REFUNDED
    }

    // ==========================
    // MODELS
    // ==========================

    model User {
      id                Int       @id @default(autoincrement())
      name              String?
      email             String    @unique
      emailVerified     DateTime?
      password          String?
      image             String?
      role              Role      @default(CUSTOMER)
      isVerifiedByAdmin Boolean   @default(false)
      phoneNumber       String?
      address           String?   @db.Text
      createdAt         DateTime  @default(now())
      updatedAt         DateTime  @updatedAt

      accounts          Account[]
      sessions          Session[]
      vehicles          Vehicle[]
      orders            Order[]
      reviews           Review[]

      @@map("User")
    }

    model Account {
      id                String  @id @default(cuid())
      userId            Int
      type              String
      provider          String
      providerAccountId String
      refresh_token     String? @db.Text
      access_token      String? @db.Text
      expires_at        Int?
      token_type        String?
      scope             String?
      id_token          String? @db.Text
      session_state     String?

      user User @relation(fields: [userId], references: [id], onDelete: Cascade)

      @@unique([provider, providerAccountId])
      @@map("Account")
    }

    model Session {
      id           String   @id @default(cuid())
      sessionToken String   @unique
      userId       Int
      expires      DateTime
      user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

      @@map("Session")
    }

    model VerificationToken {
      identifier String
      token      String   @unique
      expires    DateTime

      @@unique([identifier, token])
      @@map("VerificationToken")
    }

    model Vehicle {
      id               Int              @id @default(autoincrement())
      ownerId          Int
      name             String
      slug             String           @unique
      description      String?          @db.Text
      type             VehicleType
      capacity         Int
      transmissionType TransmissionType
      fuelType         FuelType
      dailyRate        Decimal          @db.Decimal(10, 2)
      lateFeePerDay    Decimal          @db.Decimal(10, 2)
      mainImageUrl     String?
      isAvailable      Boolean          @default(true)
      licensePlate     String           @unique
      city             String
      address          String?          @db.Text
      createdAt        DateTime         @default(now())
      updatedAt        DateTime         @updatedAt

      owner            User             @relation(fields: [ownerId], references: [id], onDelete: Cascade)
      images           VehicleImage[]
      orders           Order[]
      reviews          Review[]

      @@map("Vehicle")
    }

    model VehicleImage {
      id        Int      @id @default(autoincrement())
      vehicleId Int
      imageUrl  String
      altText   String?
      createdAt DateTime @default(now())

      vehicle Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

      @@map("VehicleImage")
    }

    model Order {
      id              Int           @id @default(autoincrement())
      userId          Int
      vehicleId       Int
      startDate       DateTime
      endDate         DateTime
      rentalDays      Int
      totalPrice      Decimal       @db.Decimal(10, 2)
      depositAmount   Decimal       @db.Decimal(10, 2)
      remainingAmount Decimal       @db.Decimal(10, 2)
      paymentMethod   PaymentMethod
      orderStatus     OrderStatus   @default(PENDING_REVIEW)
      adminNotes      String?       @db.Text
      pickupLocation  String        @db.Text
      returnLocation  String        @db.Text
      createdAt       DateTime      @default(now())
      updatedAt       DateTime      @updatedAt

      user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
      vehicle         Vehicle       @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
      payment         Payment[]

      @@index([userId])
      @@index([vehicleId])
      @@map("Order")
    }

    model Payment {
      id          Int           @id @default(autoincrement())
      orderId     Int
      amount      Decimal       @db.Decimal(10, 2)
      paymentDate DateTime      @default(now())
      method      PaymentMethod
      status      PaymentStatus @default(PENDING)
      transactionId String?     @unique
      notes       String?       @db.Text
      createdAt   DateTime      @default(now())
      updatedAt   DateTime      @updatedAt

      order       Order         @relation(fields: [orderId], references: [id])

      @@map("Payment")
    }

    model Review {
      id        Int      @id @default(autoincrement())
      userId    Int
      vehicleId Int
      rating    Int      @default(0) @db.SmallInt
      comment   String?  @db.Text
      createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt

      user      User     @relation(fields: [userId], references: [id])
      vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])

      @@unique([userId, vehicleId])
      @@index([userId])
      @@index([vehicleId])
      @@map("Review")
    }
    